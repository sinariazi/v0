// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  UNCONFIRMED
  CONFIRMED
  ARCHIVED
  COMPROMISED
  UNKNOWN
  RESET_REQUIRED
  FORCE_CHANGE_PASSWORD
}

model User {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  firstName       String
  lastName        String
  gender          Gender
  status          UserStatus @default(UNCONFIRMED)
  createdAt       DateTime   @default(now())
  role            UserRole
  organizationId  String
  team            String?
  cognitoSub      String     @unique
  cognitoUsername String?
  emailVerified   Boolean    @default(false)
  organization    Organization @relation(fields: [organizationId], references: [id])
  customer        Customer?

  @@index([email])
  @@index([organizationId])
}

model Organization {
  id           String    @id @default(uuid())
  name         String
  industry     String
  size         String
  country      String
  city         String
  street       String
  email        String
  phoneNumber  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  users        User[]
  customer     Customer?
  surveys      Survey[]
}

model Survey {
  id                 Int              @id @default(autoincrement())
  organizationId     String
  organization       Organization     @relation(fields: [organizationId], references: [id])
  createdAt          DateTime         @default(now())
  responses          SurveyResponse[]
  additionalFeedback String?
}

model SurveyResponse {
  id       Int    @id @default(autoincrement())
  surveyId Int
  survey   Survey @relation(fields: [surveyId], references: [id])
  question String
  answer   Int
}

model Customer {
  id                  String       @id @default(uuid())
  userId              Int?         @unique
  organizationId      String?      @unique
  stripeCustomerId    String?      @unique
  subscriptionId      String?      @unique
  subscriptionStatus  String?
  subscriptionPlan    String?
  trialEndDate        DateTime?
  billingCycleStart   DateTime?
  billingCycleEnd     DateTime?
  nextBillingDate     DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  user                User?        @relation(fields: [userId], references: [id])
  organization        Organization? @relation(fields: [organizationId], references: [id])
}

